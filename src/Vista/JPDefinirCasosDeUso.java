package Vista;

import Controlador.ControladorDefinirCasosDeUso;
import DTO.CasoDeUsoDTO;
import java.io.File;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

public class JPDefinirCasosDeUso extends javax.swing.JPanel {

	ControladorDefinirCasosDeUso control;
	int posCU = 0;

	/** Creates new form JPDefinirCasosDeUso */
	public JPDefinirCasosDeUso(ControladorDefinirCasosDeUso controlador) {
		this.control = controlador;
		//seteo de datos de la tabla
		initComponents();
		this.setFilas();
		this.buttonPrev.setEnabled(false);
		if (this.control.getCasosDeUso() == null) {
			setCU();
		}
		this.setCU(0);
	}

	/**
	 * Muestra cada uno de los componentes del caso de uso en cada una de las filas
	 */
	public void setFilas() {
		DefaultTableModel tabla = new MyTableModel(new Object[][]{
					{"1", "Caso de Uso", null},
					{"2", "Versión", null},
					{"3", "Resumen", null},
					{"4", "Actores", null},
					{"5", "Precondiciones", null},
					{"6", "Descripción", null},
					{"7", "Excepciones", null},
					{"8", "Post-condiciones", null}
				},
				new String[]{
					"Número", "Componente", "Descripción"});
		tabla.setRowCount(8);
		tabla.setColumnCount(3);
		this.tableCasoDeUso.setModel(tabla);
		TableColumn col = tableCasoDeUso.getColumn("Número");
		col.setMaxWidth(50);

		tableCasoDeUso.getColumn("Descripción").setCellRenderer(new YourTableCellRenderer());
	}

	/**
	 * Clase para generar las tabla
	 */
	class MyTableModel extends DefaultTableModel {

		public MyTableModel(Object[][] data, Object[] columnNames) {
			super(data, columnNames);
		}
		/**
		 *
		 * @param data
		 * @param columnNames
		 */
		@Override
		/**
		 * Si la fila es la quinta y la columna la primera, retorna true, caso contrario; false.
		 */
		public boolean isCellEditable(int row, int col) {
			if (row == 5 && col == 2) {
				return true;
			} else {
				return false;
			}
		}
	}

	//seteo del primer caso de uso
	/**
	 * Seteo del primer caso de uso
	 */
	public void setCU() {
		this.control.setCasosDeUsoInicial();
	}

	//se obtiene la posicion del caso de uso
	/**
	 * Se obtiene la posicion del caso de uso
	 * @return La posición de dicho caso de uso
	 */
	public int getPos() {
		return posCU;
	}

        /**
	 * Seteo del caso de uso de una sesion anterior
	 * @param pos Indica que número de caso de uso es.
	 */
	public void setCU(int pos) {
		//Vector v=this.control.getCasosDeUso();
		Vector v = this.control.casoUsoMod();
		this.labelCasoDeUsoN.setText("Caso de uso Nº " + (pos + 1) + " de " + v.size() + ".");
		CasoDeUsoDTO cu = (CasoDeUsoDTO) v.get(pos);
		this.tableCasoDeUso.setValueAt(cu.getNombre(), 0, 2);
		this.tableCasoDeUso.setValueAt(cu.getVersion(), 1, 2);
		this.tableCasoDeUso.setValueAt(cu.getResumen(), 2, 2);
		this.tableCasoDeUso.setValueAt(cu.getActores(), 3, 2);
		this.tableCasoDeUso.setValueAt(cu.getPrecondiciones(), 4, 2);
		this.tableCasoDeUso.setValueAt(cu.getDescripcion(), 5, 2);
		this.tableCasoDeUso.setValueAt(cu.getExcepciones(), 6, 2);
		this.tableCasoDeUso.setValueAt(cu.getPostcondiciones(), 7, 2);

	}
	/**
	 * Verificar celdas seleccionadas
	 * @return 1 si está seleccionada, 0 si no.
	 */
	public int select() {
		for (int i = 0; i < this.tableCasoDeUso.getRowCount(); i++) {
			if (this.tableCasoDeUso.isCellSelected(i, 2)) {
				return 1;
			}
		}
		return 0;
	}
	/**
	 * Obtener casos de uso
	 * @return Vector con el caso de uso completo
	 */
	public Vector getCU() {
		Vector cu = new Vector();
		for (int i = 0; i < this.tableCasoDeUso.getRowCount(); i++) {
			cu.add(this.tableCasoDeUso.getValueAt(i, 2));
		}
		return cu;

	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        labelInstrucciones = new javax.swing.JLabel();
        labelTitulo = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        scrollPaneCasoDeUso = new javax.swing.JScrollPane();
        tableCasoDeUso = new javax.swing.JTable();
        labelCasoDeUsoN = new javax.swing.JLabel();
        labelInformacion = new javax.swing.JLabel();
        buttonGenerarXML = new javax.swing.JButton();
        buttonNext = new javax.swing.JButton();
        buttonPrev = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(100, 0), new java.awt.Dimension(100, 0), new java.awt.Dimension(100, 32767));

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(proyectodetitulo.ProyectoDeTituloApp.class).getContext().getResourceMap(JPDefinirCasosDeUso.class);
        labelInstrucciones.setText(resourceMap.getString("labelInstrucciones.text")); // NOI18N
        labelInstrucciones.setName("labelInstrucciones"); // NOI18N

        labelTitulo.setFont(resourceMap.getFont("labelTitulo.font")); // NOI18N
        labelTitulo.setText(resourceMap.getString("labelTitulo.text")); // NOI18N
        labelTitulo.setName("labelTitulo"); // NOI18N

        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setLayout(new java.awt.GridBagLayout());

        scrollPaneCasoDeUso.setName("scrollPaneCasoDeUso"); // NOI18N

        tableCasoDeUso.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Caso de Uso", null},
                {"Versión", null},
                {"Resumen", null},
                {"Actores", null},
                {"Precondiciones", null},
                {"Descripción", null},
                {"Excepciones", null},
                {"Post-condiciones", null}
            },
            new String [] {
                "Componente", "Descripción"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableCasoDeUso.setCellSelectionEnabled(true);
        tableCasoDeUso.setName("tableCasoDeUso"); // NOI18N
        scrollPaneCasoDeUso.setViewportView(tableCasoDeUso);
        tableCasoDeUso.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        jPanel1.add(scrollPaneCasoDeUso, gridBagConstraints);

        labelCasoDeUsoN.setFont(resourceMap.getFont("labelCasoDeUsoN.font")); // NOI18N
        labelCasoDeUsoN.setText(resourceMap.getString("labelCasoDeUsoN.text")); // NOI18N
        labelCasoDeUsoN.setName("labelCasoDeUsoN"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        jPanel1.add(labelCasoDeUsoN, gridBagConstraints);

        labelInformacion.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelInformacion.setIcon(resourceMap.getIcon("labelInformacion.icon")); // NOI18N
        labelInformacion.setText(resourceMap.getString("labelInformacion.text")); // NOI18N
        labelInformacion.setName("labelInformacion"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        jPanel1.add(labelInformacion, gridBagConstraints);

        buttonGenerarXML.setText(resourceMap.getString("buttonGenerarXML.text")); // NOI18N
        buttonGenerarXML.setName("buttonGenerarXML"); // NOI18N
        buttonGenerarXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerarXMLActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.weightx = 0.45;
        jPanel1.add(buttonGenerarXML, gridBagConstraints);

        buttonNext.setText(resourceMap.getString("buttonNext.text")); // NOI18N
        buttonNext.setToolTipText(resourceMap.getString("buttonNext.toolTipText")); // NOI18N
        buttonNext.setName("buttonNext"); // NOI18N
        buttonNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNextActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        jPanel1.add(buttonNext, gridBagConstraints);

        buttonPrev.setText(resourceMap.getString("buttonPrev.text")); // NOI18N
        buttonPrev.setToolTipText(resourceMap.getString("buttonPrev.toolTipText")); // NOI18N
        buttonPrev.setName("buttonPrev"); // NOI18N
        buttonPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPrevActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        jPanel1.add(buttonPrev, gridBagConstraints);

        filler1.setName("filler1"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.weightx = 0.45;
        jPanel1.add(filler1, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(225, 225, 225))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelInstrucciones, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, 0, 0, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelTitulo)
                .addGap(18, 18, 18)
                .addComponent(labelInstrucciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	private void buttonPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPrevActionPerformed

		//ir a caso de uso anterior 		
		if (this.select() == 1) {this.tableCasoDeUso.clearSelection();if (this.tableCasoDeUso.getCellEditor() != null) {this.tableCasoDeUso.getCellEditor().stopCellEditing(); 			} 		} 		posCU--; 		this.buttonNext.setEnabled(true); 		if (posCU == 0) { 			this.setCU(posCU); 			this.buttonPrev.setEnabled(false); 		} else { 			this.setCU(posCU); 		} 	}//GEN-LAST:event_buttonPrevActionPerformed

		private void buttonNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNextActionPerformed

		//ir a caso de uso posterior 		
		if (this.select() == 1) { 			this.tableCasoDeUso.clearSelection(); 			if (this.tableCasoDeUso.getCellEditor() != null) { 				this.tableCasoDeUso.getCellEditor().stopCellEditing(); 			} 		} 		posCU++; 		this.buttonPrev.setEnabled(true); 		Vector v = this.control.getCasosDeUso(); 		if (posCU == v.size() - 1) { 			this.setCU(posCU); 			this.buttonNext.setEnabled(false); 		} else { 			this.setCU(posCU); 		} 	}//GEN-LAST:event_buttonNextActionPerformed

		private void buttonGenerarXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenerarXMLActionPerformed

		//se genera el xml con los casos de uso generados 		
		javax.swing.JFileChooser jF1 = new javax.swing.JFileChooser(); 		/* Se agrega filtro de extension XML */ 		FileFilter XMLFilter = new ExtensionFileFilter("Archivo XML", new String[]{"XML"}); 		jF1.addChoosableFileFilter(XMLFilter); 		/**************************************/ 		String ruta = ""; 		try { 			if (jF1.showSaveDialog(null) == jF1.APPROVE_OPTION) { 				ruta = jF1.getSelectedFile().getAbsolutePath();  				/* Agrega extension al archivo a guardar .xml  */ 				ruta = ruta + ".xml"; 				/*************************/ 				if (new File(ruta).exists()) { 					if (JOptionPane.OK_OPTION == JOptionPane.showConfirmDialog(this, "El fichero existe,desea reemplazarlo?", "Titulo", JOptionPane.YES_NO_OPTION)) { 						this.control.generarXML(ruta); 					} 				} else { 					this.control.generarXML(ruta); 				} 			} 		} catch (Exception ex) { 			ex.printStackTrace(); 		} 	}//GEN-LAST:event_buttonGenerarXMLActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonGenerarXML;
    private javax.swing.JButton buttonNext;
    private javax.swing.JButton buttonPrev;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel labelCasoDeUsoN;
    private javax.swing.JLabel labelInformacion;
    private javax.swing.JLabel labelInstrucciones;
    private javax.swing.JLabel labelTitulo;
    private javax.swing.JScrollPane scrollPaneCasoDeUso;
    private javax.swing.JTable tableCasoDeUso;
    // End of variables declaration//GEN-END:variables
}
